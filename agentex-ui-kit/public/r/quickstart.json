{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "quickstart",
  "type": "registry:block",
  "title": "Quickstart",
  "description": "Complete application for Agentex with a simple chat-style UI.",
  "dependencies": [
    "agentex@0.1.0-alpha.6",
    "next",
    "react",
    "react-error-boundary",
    "react-toastify"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/agentex-root.json",
    "http://localhost:3000/r/agentex-single-agent-root.json",
    "http://localhost:3000/r/agentex-task.json",
    "http://localhost:3000/r/agentex-theme.json",
    "http://localhost:3000/r/create-user-message-form.json",
    "http://localhost:3000/r/task-messages.json",
    "http://localhost:3000/r/all-tasks-sheet.json",
    "http://localhost:3000/r/expandable-pre.json",
    "button",
    "sheet",
    "skeleton",
    "utils"
  ],
  "files": [
    {
      "path": "registry/agentex/quickstart/page.tsx",
      "content": "\"use server\";\n\nimport { connection } from \"next/server\";\nimport { AgentApp } from \"@/registry/agentex/quickstart/agent-app\";\n\nexport default async function AgentNamePage() {\n  // load environment variables\n  await connection();\n\n  const agentName = process.env.NEXT_PUBLIC_AGENT_NAME;\n  const agentexAPIBaseURL = process.env.NEXT_PUBLIC_AGENTEX_API_BASE_URL;\n\n  if (!agentName || !agentexAPIBaseURL) {\n    return (\n      <div role=\"alert\">\n        <p>Missing some environment variables</p>\n        <pre>{JSON.stringify({ agentName, agentexAPIBaseURL }, null, 2)}</pre>\n      </div>\n    );\n  }\n\n  return (\n    <AgentApp agentName={agentName} agentexAPIBaseURL={agentexAPIBaseURL} />\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "registry/agentex/quickstart/agent-app.tsx",
      "content": "\"use client\";\n\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { AgentexSingleAgentRoot } from \"@/registry/agentex/agentex-single-agent-root/components/agentex-single-agent-root\";\nimport { Header } from \"@/registry/agentex/quickstart/header\";\nimport { MainViewController } from \"@/registry/agentex/quickstart/main-view-controller\";\nimport AgentexSDK from \"agentex\";\nimport type { Agent } from \"agentex/resources\";\nimport { Suspense, useMemo } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport { toast, ToastContainer } from \"react-toastify\";\n\ntype Props = {\n  agentName: Agent[\"name\"];\n  agentexAPIBaseURL: string;\n};\n\n/**\n * This is the main entrypoint for your app!\n *\n * This basic one does this\n * 1. Creates the agentex root context so the rest of your app has access to your agent and tasks\n * 2. Renders a header\n * 3. Renders the main content\n */\nfunction AgentAppImpl({ agentexAPIBaseURL, agentName }: Props) {\n  const agentexClient = useMemo(\n    () => new AgentexSDK({ baseURL: agentexAPIBaseURL }),\n    [agentexAPIBaseURL]\n  );\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <AgentexSingleAgentRoot\n        agentexClient={agentexClient}\n        agentName={agentName}\n        fallback={<Skeleton className=\"mx-2 flex-1 h-96\" />}\n        onError={(error) => {\n          console.error(error);\n\n          const caughtErrorMessage: string | null =\n            typeof error === \"object\" &&\n            error !== null &&\n            \"message\" in error &&\n            typeof error.message === \"string\"\n              ? error.message\n              : null;\n\n          toast.error(caughtErrorMessage ?? \"Unknown error\");\n        }}\n      >\n        <Header />\n\n        <main className=\"flex-1 flex justify-center\">\n          {/*\n            * This is your main content!\n            *\n            * Right now it just displays a chatgpt.com style UI, but you can move that to a sidebar or whatever you want.\n            */}\n\n          <div className=\"flex-1 max-w-[min(100%-var(--spacing)*4,var(--spacing)*256)] my-8\">\n            <Suspense fallback={<Skeleton className=\"flex-1 h-96\" />}>\n              <MainViewController />\n            </Suspense>\n          </div>\n        </main>\n      </AgentexSingleAgentRoot>\n    </div>\n  );\n}\n\n/**\n * This is just a wrapper for AgentAppImpl that adds\n * 1. ErrorBoundary\n * 2. ToastContainer (for error messages)\n */\nexport function AgentApp({ ...props }: Props) {\n  return (\n    <ErrorBoundary\n      fallbackRender={({ error }) => (\n        <div role=\"alert\">\n          <p>Oops! An unexpected error occurred.</p>\n          <pre className=\"text-destructive\">{error.message}</pre>\n        </div>\n      )}\n    >\n      <AgentAppImpl {...props} />\n      <ToastContainer />\n    </ErrorBoundary>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/agent-app.tsx"
    },
    {
      "path": "registry/agentex/quickstart/create-task-view.tsx",
      "content": "import { useAgentexSingleAgentRootController } from \"@/registry/agentex/agentex-single-agent-root/hooks/use-agentex-single-agent-root-controller\";\nimport { useSingleAgent } from \"@/registry/agentex/agentex-single-agent-root/hooks/use-single-agent\";\nimport {\n  CreateUserMessageForm,\n  CreateUserMessageFormContent,\n} from \"@/registry/agentex/create-user-message-form/create-user-message-form\";\nimport { useSafeSearchParams } from \"@/registry/agentex/quickstart/hooks/use-safe-search-params\";\nimport { useState } from \"react\";\n\n/**\n * This is the UI that appears when no task is selected.\n */\nexport function CreateTaskView() {\n  // state + controllers from root context (see agent-app.tsx)\n  const agent = useSingleAgent();\n  const { createTask } = useAgentexSingleAgentRootController();\n\n  // search params (used to switch to the task the user creates)\n  const { setTaskID } = useSafeSearchParams();\n\n  // local state\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [formDisabled, setFormDisabled] = useState(false);\n\n  // TODO: this depends on your app\n  const theme = \"light\";\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"text-destructive min-h-8\" role=\"alert\" aria-live=\"polite\">\n        {errorMessage}\n      </div>\n\n      <CreateUserMessageForm\n        agentOptions={[agent]}\n        disabled={formDisabled}\n        theme={theme}\n        onSubmit={(data, resetForm) => {\n          setErrorMessage(null);\n          setFormDisabled(true);\n          createTask(\n            data.kind === \"data\"\n              ? {\n                  author: \"user\",\n                  type: \"data\",\n                  data: data.content,\n                }\n              : {\n                  author: \"user\",\n                  type: \"text\",\n                  format: \"markdown\",\n                  content: data.content,\n                }\n          ).then(\n            (task) => {\n              setFormDisabled(false);\n              resetForm();\n              setTaskID(task.id);\n            },\n            (error) => {\n              setFormDisabled(false);\n              console.error(error);\n\n              const caughtErrorMessage: string | null =\n                typeof error === \"object\" &&\n                error !== null &&\n                \"message\" in error &&\n                typeof error.message === \"string\"\n                  ? error.message\n                  : null;\n\n              setErrorMessage(caughtErrorMessage ?? \"Failed to send message.\");\n            }\n          );\n        }}\n      >\n        <CreateUserMessageFormContent />\n      </CreateUserMessageForm>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/create-task-view.tsx"
    },
    {
      "path": "registry/agentex/quickstart/header.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { useAgentexRootStore } from \"@/registry/agentex/agentex-root/hooks/use-agentex-root-store\";\nimport { useSingleAgent } from \"@/registry/agentex/agentex-single-agent-root/hooks/use-single-agent\";\nimport { AllTasksSheet } from \"@/registry/agentex/all-tasks-sheet/all-tasks-sheet\";\nimport { ExpandablePre } from \"@/registry/agentex/expandable-pre/expandable-pre\";\nimport { useSafeSearchParams } from \"@/registry/agentex/quickstart/hooks/use-safe-search-params\";\nimport type { Agent } from \"agentex/resources\";\nimport { Suspense } from \"react\";\n\ntype ImplProps = {\n  agent: Agent;\n};\n\n/**\n * A simple header that looks like this:\n *                     Agent Name\n * Status    Description        New Task    View All Tasks\n */\nfunction HeaderImpl({ agent }: ImplProps) {\n  // state from agentex root context (see agent-app.tsx)\n  const tasks = useAgentexRootStore((state) => state.tasks);\n\n  const { taskID, setTaskID } = useSafeSearchParams();\n\n  return (\n    <header className=\"w-full mt-4\">\n      <div className=\"mx-auto max-w-[min(100%-var(--spacing)*4,var(--spacing)*256)]\">\n        <div className=\"flex flex-col justify-center gap-2 my-2 mx-4\">\n          <button\n            className=\"hover:underline hover:text-accent-foreground\"\n            onClick={() => setTaskID(null)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" || e.key === \" \") {\n                e.preventDefault();\n                setTaskID(null);\n              }\n            }}\n          >\n            <h1>{agent.name}</h1>\n          </button>\n\n          <div className=\"flex justify-between items-end-safe\">\n            <div className=\"flex items-baseline gap-2 p-1\">\n              Status: {agent.status} {agent.status_reason}\n              <div className=\"h-7 overflow-visible mr-2 bg-background p-1 rounded-md z-1\">\n                <ExpandablePre lineClampValue={1}>\n                  {agent.description}\n                </ExpandablePre>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-1\">\n              {taskID !== null && (\n                <Button\n                  className=\"h-10\"\n                  type=\"button\"\n                  variant=\"secondary\"\n                  onClick={() => {\n                    setTaskID(null);\n                  }}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" || e.key === \" \") {\n                      e.preventDefault();\n                      setTaskID(null);\n                    }\n                  }}\n                >\n                  New task\n                </Button>\n              )}\n\n              <AllTasksSheet\n                tasks={tasks}\n                selectedTaskID={taskID}\n                onSelectTask={setTaskID}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport function Header() {\n  const agent = useSingleAgent();\n\n  return (\n    <Suspense\n      fallback={\n        <header className=\"w-full mt-4\">\n          <div className=\"mx-auto max-w-[min(100%-var(--spacing)*4,var(--spacing)*256)]\">\n            <div className=\"flex flex-col justify-center gap-2 my-2 mx-4\">\n              <h1>{agent.name}</h1>\n\n              <div className=\"flex justify-start items-end-safe\">\n                <div className=\"flex items-baseline gap-2 p-1\">\n                  Status: {agent.status} {agent.status_reason}\n                  <div className=\"h-7 overflow-visible mr-2\">\n                    <ExpandablePre\n                      lineClampValue={1}\n                      className=\"bg-background p-1 rounded-md\"\n                    >\n                      {agent.description}\n                    </ExpandablePre>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n      }\n    >\n      <HeaderImpl agent={agent} />\n    </Suspense>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/header.tsx"
    },
    {
      "path": "registry/agentex/quickstart/loading.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Loading() {\n  return (\n    <>\n      <header className=\"w-full md:sticky mt-4 md:top-0 md:z-10 bg-background\">\n        <div className=\"mx-auto max-w-[min(100%-var(--spacing)*4,var(--spacing)*256)]\">\n          <h1>Loading...</h1>\n        </div>\n      </header>\n      <main className=\"w-full\">\n        <Skeleton className=\"mx-auto w-[min(100%-var(--spacing)*4,var(--spacing)*256)] h-96 animate-pulse\" />\n      </main>\n    </>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/loading.tsx"
    },
    {
      "path": "registry/agentex/quickstart/main-view-controller.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\nimport { AgentexTask } from \"@/registry/agentex/agentex-task/components/agentex-task\";\nimport { CreateTaskView } from \"@/registry/agentex/quickstart/create-task-view\";\nimport { useSafeSearchParams } from \"@/registry/agentex/quickstart/hooks/use-safe-search-params\";\nimport { TaskView } from \"@/registry/agentex/quickstart/task-view\";\nimport { toast } from \"react-toastify\";\n\n/**\n * This controls which view gets shown\n * 1. CreateTaskView\n * 2. TaskView\n */\nexport function MainViewController() {\n  const { taskID } = useSafeSearchParams();\n\n  if (taskID === null) {\n    return <CreateTaskView />;\n  }\n\n  return (\n    <AgentexTask\n      taskID={taskID}\n      fallback={<Skeleton className=\"w-full h-96\" />}\n      onError={(error) => {\n        console.error(error);\n\n        const caughtErrorMessage: string | null =\n          typeof error === \"object\" &&\n          error !== null &&\n          \"message\" in error &&\n          typeof error.message === \"string\"\n            ? error.message\n            : null;\n\n        toast.error(\n          `Failed to load task: ID=${taskID} ${\n            caughtErrorMessage ?? \"unknown error\"\n          }`\n        );\n      }}\n    >\n      <TaskView />\n    </AgentexTask>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/main-view-controller.tsx"
    },
    {
      "path": "registry/agentex/quickstart/task-view.tsx",
      "content": "import { Skeleton } from \"@/components/ui/skeleton\";\nimport { cn } from \"@/lib/utils\";\nimport { useSingleAgentTaskController } from \"@/registry/agentex/agentex-single-agent-root/hooks/use-agentex-single-agent-task-controller\";\nimport { useSingleAgent } from \"@/registry/agentex/agentex-single-agent-root/hooks/use-single-agent\";\nimport {\n  useAgentexTask,\n  useAgentexTaskStore,\n} from \"@/registry/agentex/agentex-task/hooks/use-agentex-task-store\";\nimport {\n  CreateUserMessageForm,\n  CreateUserMessageFormContent,\n} from \"@/registry/agentex/create-user-message-form/create-user-message-form\";\nimport { TaskMessagesComponent } from \"@/registry/agentex/task-messages/task-messages\";\nimport { useState } from \"react\";\n\n/**\n * This is the UI that appears when a task is selected.\n */\nexport function TaskView() {\n  // state + controllers from root context (see agent-app.tsx)\n  const agent = useSingleAgent();\n  const { isSendMessageEnabled, sendMessage } = useSingleAgentTaskController();\n\n  // state from task context (see main-view-controller.tsx)\n  const task = useAgentexTask();\n  const messages = useAgentexTaskStore((s) => s.messages);\n  const streamStatus = useAgentexTaskStore((s) => s.streamStatus);\n\n  // local state\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [isSending, setIsSending] = useState(false);\n\n  // computed view\n  const isTaskTerminal = task?.status != null && task.status !== \"RUNNING\";\n  const showForm = !isTaskTerminal && isSendMessageEnabled;\n  const showFormLoading = !isTaskTerminal && !showForm;\n\n  // TODO: this depends on your app\n  const theme = \"light\";\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <TaskMessagesComponent messages={messages} theme={theme} />\n      <div className=\"text-destructive min-h-8\" role=\"alert\" aria-live=\"polite\">\n        {streamStatus === \"reconnecting\"\n          ? \"Reconnecting...\"\n          : streamStatus === \"error\"\n          ? \"Failed to connect to task\"\n          : errorMessage}\n      </div>\n\n      {showForm && (\n        <CreateUserMessageForm\n          agentOptions={[agent]}\n          disabled={isSending}\n          theme={theme}\n          onSubmit={(data, resetForm) => {\n            setErrorMessage(null);\n            setIsSending(true);\n            sendMessage(\n              data.kind === \"data\"\n                ? {\n                    author: \"user\",\n                    type: \"data\",\n                    data: data.content,\n                  }\n                : {\n                    author: \"user\",\n                    type: \"text\",\n                    format: \"markdown\",\n                    content: data.content,\n                  }\n            ).then(\n              () => {\n                setIsSending(false);\n                resetForm();\n              },\n              (error) => {\n                setIsSending(false);\n                console.error(error);\n\n                const caughtErrorMessage: string | null =\n                  typeof error === \"object\" &&\n                  error !== null &&\n                  \"message\" in error &&\n                  typeof error.message === \"string\"\n                    ? error.message\n                    : null;\n\n                setErrorMessage(\n                  caughtErrorMessage ?? \"Failed to send message.\"\n                );\n              }\n            );\n          }}\n        >\n          <CreateUserMessageFormContent />\n        </CreateUserMessageForm>\n      )}\n      {showFormLoading && <Skeleton className=\"w-full h-61 animate-pulse\" />}\n      <div\n        className={cn(\"mx-auto\", {\n          invisible: !isTaskTerminal,\n        })}\n      >\n        Task status: {task?.status} {task?.status_reason}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/task-view.tsx"
    },
    {
      "path": "registry/agentex/quickstart/hooks/use-safe-search-params.ts",
      "content": "import { usePathname, useRouter, useSearchParams } from \"next/navigation\";\nimport { useCallback, useMemo } from \"react\";\n\ntype SafeSearchParams = {\n  taskID: string | null;\n  setTaskID: (taskID: string | null) => void;\n};\n\n/**\n * This will suspend rendering. Be sure you put suspense boundary somewhere.\n */\nexport function useSafeSearchParams(): SafeSearchParams {\n  const TASK_ID_SEARCH_PARAM = \"task_id\" as const;\n\n  const router = useRouter();\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n\n  const taskID = searchParams.get(TASK_ID_SEARCH_PARAM);\n\n  const setTaskID = useCallback(\n    (newTaskID: string | null): void => {\n      const params = new URLSearchParams(searchParams.toString());\n      if (newTaskID) {\n        params.set(TASK_ID_SEARCH_PARAM, newTaskID);\n      } else {\n        params.delete(TASK_ID_SEARCH_PARAM);\n      }\n      router.push(`${pathname}?${params.toString()}`);\n    },\n    [router, pathname, searchParams]\n  );\n\n  return useMemo(\n    () => ({\n      taskID: taskID || null,\n      setTaskID,\n    }),\n    [taskID, setTaskID]\n  );\n}\n",
      "type": "registry:hook"
    }
  ]
}