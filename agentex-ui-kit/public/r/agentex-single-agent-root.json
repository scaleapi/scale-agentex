{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "agentex-single-agent-root",
  "type": "registry:block",
  "title": "Agentex Single Agent Root",
  "description": "Single agent version of Agentex Root for focused agent interactions.",
  "dependencies": [
    "agentex@0.1.0-alpha.6",
    "react",
    "zustand"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/agentex-root.json"
  ],
  "files": [
    {
      "path": "registry/agentex/agentex-single-agent-root/components/agentex-single-agent-root.tsx",
      "content": "\"use client\";\n\nimport {\n  AgentexRootStore,\n  AgentexRootStoreContext,\n  createAgentexRootStore,\n} from \"@/registry/agentex/agentex-root/hooks/use-agentex-root-store\";\nimport AgentexSDK from \"agentex\";\nimport type { Agent } from \"agentex/resources\";\nimport { useEffect, useRef, useState } from \"react\";\n\ntype AgentexSingleAgentRootProps = {\n  agentexClient: AgentexSDK;\n  children?: React.ReactNode;\n  fallback?: React.ReactNode;\n  onError: (error: unknown) => void;\n  agentName: Agent[\"name\"];\n};\n\nfunction AgentexSingleAgentRoot({\n  agentexClient,\n  children,\n  fallback,\n  onError,\n  agentName,\n}: AgentexSingleAgentRootProps) {\n  const [store, setStore] = useState<AgentexRootStore | null>(null);\n\n  const onErrorRef = useRef<typeof onError>(onError);\n  // keep onErrorRef in sync\n  useEffect(() => {\n    onErrorRef.current = onError;\n  }, [onError]);\n\n  // bootstrap\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    setStore(null);\n\n    Promise.all([\n      agentexClient.agents.retrieveByName(agentName, {\n        signal: abortController.signal,\n      }),\n      agentexClient.tasks.list(\n        { agent_name: agentName },\n        { signal: abortController.signal }\n      ),\n    ]).then(\n      ([agent, tasks]) => {\n        if (abortController.signal.aborted) return;\n        const store = createAgentexRootStore({\n          agentexClient,\n          agents: [agent],\n          tasks,\n        });\n        setStore(store);\n      },\n      (error) => {\n        if (abortController.signal.aborted) {\n          return;\n        }\n\n        onErrorRef.current(error);\n      }\n    );\n\n    return () => {\n      abortController.abort();\n    };\n  }, [setStore, agentexClient, agentName]);\n\n  // loading\n  if (store === null) {\n    return <>{fallback}</>;\n  }\n\n  // render\n  return (\n    <AgentexRootStoreContext.Provider value={store}>\n      {children}\n    </AgentexRootStoreContext.Provider>\n  );\n}\n\nexport { AgentexSingleAgentRoot };\n",
      "type": "registry:component"
    },
    {
      "path": "registry/agentex/agentex-single-agent-root/hooks/use-agentex-single-agent-root-controller.ts",
      "content": "\"use client\";\n\nimport { useAgentexRootController } from \"@/registry/agentex/agentex-root/hooks/use-agentex-root-controller\";\nimport { useSingleAgent } from \"@/registry/agentex/agentex-single-agent-root/hooks/use-single-agent\";\nimport type { Task, TaskMessageContent } from \"agentex/resources\";\nimport { useMemo } from \"react\";\n\ntype AgentexSingleAgentRootController = {\n  createTask: (\n    messageContent: TaskMessageContent | null,\n    taskParams?: Record<string, unknown> | null\n  ) => Promise<Task>;\n};\n\nfunction useAgentexSingleAgentRootController(): AgentexSingleAgentRootController {\n  const { createTask } = useAgentexRootController();\n  const agent = useSingleAgent();\n  const agentID = agent.id;\n\n  return useMemo(\n    () => ({\n      createTask: (...args) => createTask(agentID, null, ...args),\n    }),\n    [createTask, agentID]\n  );\n}\n\nexport { useAgentexSingleAgentRootController };\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/agentex/agentex-single-agent-root/hooks/use-agentex-single-agent-task-controller.ts",
      "content": "import { useSingleAgent } from \"@/registry/agentex/agentex-single-agent-root/hooks/use-single-agent\";\nimport { useAgentexTaskController } from \"@/registry/agentex/agentex-task/hooks/use-agentex-task-controller\";\nimport type { TaskMessageContent } from \"agentex/resources\";\nimport { useCallback, useMemo } from \"react\";\n\ntype SingleAgentTaskController = {\n  isSendMessageEnabled: boolean;\n  sendMessage: (content: TaskMessageContent) => Promise<void>;\n};\n\nfunction useSingleAgentTaskController(): SingleAgentTaskController {\n  const agentexTaskController = useAgentexTaskController();\n  const agent = useSingleAgent();\n  const agentID = agent.id;\n\n  const sendMessage = useCallback<SingleAgentTaskController[\"sendMessage\"]>(\n    (content) => agentexTaskController.sendMessage(agentID, content),\n    [agentexTaskController.sendMessage, agentID]\n  );\n\n  return useMemo(\n    () => ({\n      isSendMessageEnabled: agentexTaskController.isSendMessageEnabled,\n      sendMessage,\n    }),\n    [agentexTaskController.isSendMessageEnabled, sendMessage]\n  );\n}\n\nexport { useSingleAgentTaskController };\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/agentex/agentex-single-agent-root/hooks/use-single-agent.ts",
      "content": "\"use client\";\n\nimport {\n  useAgentexRootStore\n} from \"@/registry/agentex/agentex-root/hooks/use-agentex-root-store\";\nimport type { Agent } from \"agentex/resources\";\n\nfunction useSingleAgent(): Agent {\n  const agent = useAgentexRootStore((s) => s.agents[0]);\n  if (agent === undefined) {\n    throw new Error(\n      \"useSingleAgent must be used within AgentexSingleAgentRoot\"\n    );\n  }\n  return agent;\n}\n\nexport { useSingleAgent };\n",
      "type": "registry:hook"
    }
  ]
}