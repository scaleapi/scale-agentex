{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "agentex-dev-root",
  "type": "registry:block",
  "title": "Agentex Dev Root",
  "description": "Development version of Agentex Root. Not suitable for production apps.",
  "dependencies": [
    "@edge-runtime/cookies",
    "@hookform/resolvers@5",
    "agentex@0.1.0-alpha.6",
    "lucide-react",
    "next",
    "react-hook-form",
    "react",
    "zod@4",
    "zustand"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/agentex-root.json",
    "button",
    "card",
    "collapsible",
    "form",
    "input",
    "sheet",
    "utils"
  ],
  "files": [
    {
      "path": "registry/agentex/agentex-dev-root/components/agentex-dev-client-setup-form.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  useAgentexDevRootSetupStore,\n} from \"@/registry/agentex/agentex-dev-root/hooks/use-agentex-dev-root-setup\";\nimport { SetupFormData, SetupFormDataSchema } from \"@/registry/agentex/agentex-dev-root/lib/agentex-dev-root-setup-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { ChevronsUpDown } from \"lucide-react\";\nimport { useFieldArray, useForm, UseFormReturn } from \"react-hook-form\";\n\ntype AgentexDevRootSetupFormDefaultHeaderFieldProps = {\n  form: UseFormReturn<SetupFormData>;\n  index: number;\n  onDelete: (index: number) => void;\n  className?: string;\n};\n\ntype AgentexDevRootSetupFormCookieFieldProps = {\n  form: UseFormReturn<SetupFormData>;\n  index: number;\n  onDelete: (index: number) => void;\n  className?: string;\n};\n\nfunction AgentexDevRootSetupFormDefaultHeaderField({\n  form,\n  index,\n  onDelete,\n  className,\n}: AgentexDevRootSetupFormDefaultHeaderFieldProps) {\n  return (\n    <div\n      className={cn(\"grid grid-cols-[1fr_auto] items-center gap-2\", className)}\n    >\n      <FormField\n        control={form.control}\n        name={`defaultHeaders.${index}.key`}\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel hidden>Header {index + 1}</FormLabel>\n            <FormControl>\n              <Input placeholder=\"Header: e.g. x-api-key\" {...field} />\n            </FormControl>\n            <FormDescription hidden>The name of the header</FormDescription>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n      <Button\n        variant=\"destructive\"\n        type=\"button\"\n        onClick={() => onDelete(index)}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            onDelete(index);\n          }\n        }}\n      >\n        Delete\n      </Button>\n      <FormField\n        control={form.control}\n        name={`defaultHeaders.${index}.value`}\n        render={({ field }) => (\n          <FormItem className=\"flex-1\">\n            <FormLabel hidden>Header {index + 1} Value</FormLabel>\n            <FormControl>\n              <Input placeholder=\"SOME_ENV_VAR or raw-value\" {...field} />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n      <FormField\n        control={form.control}\n        name={`defaultHeaders.${index}.fromEnv`}\n        render={({ field }) => (\n          <FormItem className=\"flex items-center gap-2\">\n            <FormControl>\n              <Input\n                type=\"checkbox\"\n                {...field}\n                value={field.value ? \"true\" : \"false\"}\n                checked={field.value}\n              />\n            </FormControl>\n            <FormLabel className=\"text-sm\">From Env</FormLabel>\n          </FormItem>\n        )}\n      />\n    </div>\n  );\n}\n\nfunction AgentexDevRootSetupFormCookieField({\n  form,\n  index,\n  onDelete,\n  className,\n}: AgentexDevRootSetupFormCookieFieldProps) {\n  return (\n    <div\n      className={cn(\"grid grid-cols-[1fr_1fr_auto] items-center gap-2\", className)}\n    >\n      <FormField\n        control={form.control}\n        name={`cookies.${index}.name`}\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel hidden>Cookie {index + 1} Name</FormLabel>\n            <FormControl>\n              <Input placeholder=\"Cookie name: e.g. _jwt\" {...field} />\n            </FormControl>\n            <FormDescription hidden>The name of the cookie</FormDescription>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n      <FormField\n        control={form.control}\n        name={`cookies.${index}.value`}\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel hidden>Cookie {index + 1} Value</FormLabel>\n            <FormControl>\n              <Input placeholder=\"Cookie value\" {...field} />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n      <Button\n        variant=\"destructive\"\n        type=\"button\"\n        onClick={() => onDelete(index)}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            onDelete(index);\n          }\n        }}\n      >\n        Delete\n      </Button>\n    </div>\n  );\n}\n\nfunction AgentexDevClientSetupFormTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetTrigger>) {\n  return <SheetTrigger {...props} />;\n}\n\nfunction AgentexDevClientSetupFormContent({\n  ...props\n}: React.ComponentProps<typeof SheetContent>) {\n  const onSubmit = useAgentexDevRootSetupStore((s) => s.setupFormOnSubmit);\n  const defaultValues = useAgentexDevRootSetupStore(\n    (s) => s.setupFormDefaultValues\n  );\n\n  const form = useForm<SetupFormData>({\n    resolver: zodResolver(SetupFormDataSchema),\n    defaultValues,\n  });\n\n  const defaultHeadersFieldArray = useFieldArray({\n    control: form.control,\n    name: \"defaultHeaders\",\n  });\n\n  const cookiesFieldArray = useFieldArray({\n    control: form.control,\n    name: \"cookies\",\n  });\n\n  // this component is not the view\n  if (props.children !== undefined) {\n    return <SheetContent {...props} />;\n  }\n\n  // this component is the view\n  return (\n    <SheetContent {...props}>\n      <Form {...form}>\n        <form\n          onSubmit={form.handleSubmit((data) => {\n            onSubmit(data);\n            form.reset(data);\n          })}\n          className=\"space-y-8\"\n        >\n          <SheetHeader>\n            <div className=\"flex items-baseline-last justify-between gap-2\">\n              <SheetTitle>Client Setup</SheetTitle>\n              <div>\n                {form.formState.isDirty && (\n                  <Button type=\"submit\">\n                    Save Changes\n                  </Button>\n                )}\n              </div>\n            </div>\n            <SheetDescription>\n              Configure the Agentex client for development purposes.\n            </SheetDescription>\n          </SheetHeader>\n\n          <FormField\n            control={form.control}\n            name=\"baseURL\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Base URL</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"http://localhost:5003\"\n                    type=\"url\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormDescription>\n                  Agentex URL. Defaults to your local Agentex server.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"apiKeyEnvVar\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>API Key Environment Variable</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"SOME_ENV_VAR\" {...field} />\n                </FormControl>\n                <FormDescription>\n                  If you want to use an API key, set it as an environment\n                  variable in your .env file and specify the variable name here.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <p>\n            Note that web clients should not be given API keys in production.\n            This is for local development only. Consider cookie or token based\n            authentication in production.\n          </p>\n\n          <Card>\n            <Collapsible>\n              <CardHeader className=\"flex items-center gap-4\">\n                <CardTitle className=\"w-fit\">Default Headers</CardTitle>\n                <CollapsibleTrigger asChild>\n                  <Button variant=\"outline\" size=\"icon\">\n                    <ChevronsUpDown />\n                  </Button>\n                </CollapsibleTrigger>\n              </CardHeader>\n              <CollapsibleContent>\n                <CardContent className=\"flex flex-col px-8 divide-y\">\n                  <div className=\"flex gap-2 items-baseline-last py-4 justify-between\">\n                    <p>\n                      `From Env` indicates whether the header value is the name\n                      of an environment variable or the raw value itself. Use\n                      environment variables for secrets. You can set environment\n                      variables by creating a .env file at the root of\n                      agentex-ui and restarting the app.\n                    </p>\n                    <Button\n                      className=\"w-fit\"\n                      variant=\"secondary\"\n                      type=\"button\"\n                      onClick={() => {\n                        defaultHeadersFieldArray.append({\n                          key: \"\",\n                          value: \"\",\n                          fromEnv: true,\n                        });\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\" || e.key === \" \") {\n                          e.preventDefault();\n                          defaultHeadersFieldArray.append({\n                            key: \"\",\n                            value: \"\",\n                            fromEnv: true,\n                          });\n                        }\n                      }}\n                    >\n                      Add a default header\n                    </Button>\n                  </div>\n                  {defaultHeadersFieldArray.fields.map((field, index) => (\n                    <AgentexDevRootSetupFormDefaultHeaderField\n                      key={field.id}\n                      index={index}\n                      form={form}\n                      onDelete={defaultHeadersFieldArray.remove}\n                      className=\"py-4\"\n                    />\n                  ))}\n                  {defaultHeadersFieldArray.fields.length === 0 && (\n                    <div className=\"text-muted-foreground py-4\">\n                      (no default headers)\n                    </div>\n                  )}\n                </CardContent>\n              </CollapsibleContent>\n            </Collapsible>\n          </Card>\n\n          <Card>\n            <Collapsible>\n              <CardHeader className=\"flex items-center gap-4\">\n                <CardTitle className=\"w-fit\">Cookies</CardTitle>\n                <CollapsibleTrigger asChild>\n                  <Button variant=\"outline\" size=\"icon\">\n                    <ChevronsUpDown />\n                  </Button>\n                </CollapsibleTrigger>\n              </CardHeader>\n              <CollapsibleContent>\n                <CardContent className=\"flex flex-col px-8 divide-y\">\n                  <div className=\"flex gap-2 items-baseline-last py-4 justify-between\">\n                    <p>\n                      Add cookies that will be sent with every request to the Agentex server.\n                    </p>\n                    <Button\n                      className=\"w-fit\"\n                      variant=\"secondary\"\n                      type=\"button\"\n                      onClick={() => {\n                        cookiesFieldArray.append({\n                          name: \"\",\n                          value: \"\",\n                        });\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\" || e.key === \" \") {\n                          e.preventDefault();\n                          cookiesFieldArray.append({\n                            name: \"\",\n                            value: \"\",\n                          });\n                        }\n                      }}\n                    >\n                      Add a cookie\n                    </Button>\n                  </div>\n                  {cookiesFieldArray.fields.map((field, index) => (\n                    <AgentexDevRootSetupFormCookieField\n                      key={field.id}\n                      index={index}\n                      form={form}\n                      onDelete={cookiesFieldArray.remove}\n                      className=\"py-4\"\n                    />\n                  ))}\n                  {cookiesFieldArray.fields.length === 0 && (\n                    <div className=\"text-muted-foreground py-4\">\n                      (no cookies)\n                    </div>\n                  )}\n                </CardContent>\n              </CollapsibleContent>\n            </Collapsible>\n          </Card>\n\n          <FormField\n            control={form.control}\n            name=\"maxRetries\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Max Retries</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"3\" type=\"number\" {...field} />\n                </FormControl>\n                <FormDescription>\n                  How many times to retry failed API calls.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"timeout\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Timeout</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"300000\" type=\"number\" {...field} />\n                </FormControl>\n                <FormDescription>\n                  Timeout for API calls in milliseconds.\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </form>\n      </Form>\n    </SheetContent>\n  );\n}\n\ntype AgentexDevClientSetupFormProps = {\n  children?: React.ReactNode;\n};\n\nfunction AgentexDevClientSetupForm({\n  children,\n}: AgentexDevClientSetupFormProps) {\n  const isSetupFormOpen = useAgentexDevRootSetupStore((s) => s.isSetupFormOpen);\n  const setIsSetupFormOpen = useAgentexDevRootSetupStore(\n    (s) => s.setIsSetupFormOpen\n  );\n\n  return (\n    <Sheet open={isSetupFormOpen} onOpenChange={setIsSetupFormOpen}>\n      {children}\n    </Sheet>\n  );\n}\n\nexport {\n  AgentexDevClientSetupForm,\n  AgentexDevClientSetupFormContent,\n  AgentexDevClientSetupFormTrigger\n};\n\n",
      "type": "registry:component"
    },
    {
      "path": "registry/agentex/agentex-dev-root/components/agentex-dev-root.tsx",
      "content": "\"use client\";\n\nimport {\n  AgentexDevRootSetupStore,\n  AgentexDevRootSetupStoreContext,\n  createAgentexDevRootSetupStore,\n  useAgentexDevRootSetupStore,\n} from \"@/registry/agentex/agentex-dev-root/hooks/use-agentex-dev-root-setup\";\nimport { AgentexRoot } from \"@/registry/agentex/agentex-root/components/agentex-root\";\nimport { useEffect, useRef, useState } from \"react\";\n\ntype AgentexDevRootProps = {\n  children?: React.ReactNode;\n  fallback?: React.ReactNode;\n  onError?: ((error: unknown) => void) | undefined;\n};\n\n/**\n * Implementation for AgentexDevRoot after environment variables have been loaded.\n */\nfunction AgentexDevRootImpl({\n  children,\n  fallback,\n  onError,\n}: AgentexDevRootProps) {\n  const client = useAgentexDevRootSetupStore((s) => s.client);\n\n  return (\n    <AgentexRoot fallback={fallback} agentexClient={client} onError={onError}>\n      {children}\n    </AgentexRoot>\n  );\n}\n\n/**\n * Shared Context for a single Agentex app. This is used as a replacement for AgentexRoot for development purposes.\n */\nfunction AgentexDevRoot(props: AgentexDevRootProps) {\n  const onErrorRef = useRef(props.onError);\n  useEffect(() => {\n    onErrorRef.current = props.onError;\n  }, [props.onError]);\n\n  const [store, setStore] = useState<AgentexDevRootSetupStore>();\n\n  // bootstrap\n  useEffect(() => {\n    setStore(\n      createAgentexDevRootSetupStore(\n        {\n          storageKey: \"agentex-dev-root\",\n        },\n        window.location\n      )\n    );\n  }, [setStore]);\n\n  if (!store) {\n    return <div>Loading dev root...</div>;\n  }\n\n  return (\n    <AgentexDevRootSetupStoreContext.Provider value={store}>\n      <AgentexDevRootImpl {...props} />\n    </AgentexDevRootSetupStoreContext.Provider>\n  );\n}\n\nexport { AgentexDevRoot };\n",
      "type": "registry:component"
    },
    {
      "path": "registry/agentex/agentex-dev-root/hooks/use-agentex-dev-root-setup.ts",
      "content": "\"use client\";\n\nimport {\n  SETUP_FORM_DATA_HEADER_NAME,\n  SetupFormData,\n  SetupFormDataSchema,\n} from \"@/registry/agentex/agentex-dev-root/lib/agentex-dev-root-setup-form\";\nimport AgentexSDK from \"agentex\";\nimport { createContext, useContext } from \"react\";\nimport { createStore, StoreApi, useStore } from \"zustand\";\n\nfunction createClientFromFormData(\n  data: SetupFormData,\n  clientLocation: Readonly<Pick<Location, \"protocol\" | \"host\">>\n): AgentexSDK {\n  return new AgentexSDK({\n    baseURL:\n      clientLocation.protocol + \"//\" + clientLocation.host + \"/api/agentex\",\n    maxRetries: data.maxRetries,\n    timeout: data.timeout,\n    defaultHeaders: {\n      [SETUP_FORM_DATA_HEADER_NAME]: JSON.stringify(data),\n    },\n  });\n}\n\nconst getSetupFormDataFromStorage = (\n  storage: Storage,\n  storageKey: string\n): SetupFormData | null => {\n  const storedParams = storage.getItem(storageKey);\n  if (storedParams !== null) {\n    const parseResult = SetupFormDataSchema.safeParse(JSON.parse(storedParams));\n    if (parseResult.success) {\n      return parseResult.data;\n    }\n  }\n  return null;\n};\n\ntype AgentexDevRootSetupStoreProps = {\n  storageKey: string;\n};\n\ntype AgentexDevRootSetupStoreState = AgentexDevRootSetupStoreProps & {\n  client: AgentexSDK;\n  setupFormDefaultValues: SetupFormData;\n  isSetupFormOpen: boolean;\n  setIsSetupFormOpen: (open: boolean) => void;\n  setupFormOnSubmit: (data: SetupFormData) => void;\n};\n\ntype AgentexDevRootSetupStore = StoreApi<AgentexDevRootSetupStoreState>;\n\nfunction getStorage(): Storage | null {\n  return typeof window !== \"undefined\" ? window.localStorage : null;\n}\n\nfunction createAgentexDevRootSetupStore(\n  initialState: AgentexDevRootSetupStoreProps,\n  clientLocation: Readonly<Pick<Location, \"protocol\" | \"host\">>\n): AgentexDevRootSetupStore {\n  const initialStorage = getStorage();\n  const formDataFromStorage =\n    initialStorage !== null\n      ? getSetupFormDataFromStorage(initialStorage, initialState.storageKey)\n      : null;\n\n  const calculatedFormData: SetupFormData = formDataFromStorage ?? {\n    baseURL: \"\",\n    apiKeyEnvVar: \"\",\n    defaultHeaders: [],\n    cookies: [],\n    maxRetries: 3,\n    timeout: 300_000,\n  };\n\n  if (formDataFromStorage === null) {\n    // make sure we only default to open once\n    initialStorage?.setItem(\n      initialState.storageKey,\n      JSON.stringify(calculatedFormData)\n    );\n  }\n\n  return createStore((set) => ({\n    ...initialState,\n    client: createClientFromFormData(calculatedFormData, clientLocation),\n    setupFormDefaultValues: calculatedFormData,\n    isSetupFormOpen: formDataFromStorage === null, // default open if nothing was found in storage\n    setIsSetupFormOpen: (open) => set({ isSetupFormOpen: open }),\n    setupFormOnSubmit: (data) => {\n      const client = createClientFromFormData(data, clientLocation);\n      set({\n        client,\n        setupFormDefaultValues: data,\n        isSetupFormOpen: false,\n      });\n      getStorage()?.setItem(initialState.storageKey, JSON.stringify(data));\n    },\n  }));\n}\n\nconst AgentexDevRootSetupStoreContext =\n  createContext<AgentexDevRootSetupStore | null>(null);\n\nfunction useAgentexDevRootSetupStore<T>(\n  selector: (state: AgentexDevRootSetupStoreState) => T\n): T {\n  const store = useContext(AgentexDevRootSetupStoreContext);\n  if (store === null) {\n    throw new Error(\n      \"useAgentexDevRootSetupStore must be used within AgentexDevRootSetupStoreContext\"\n    );\n  }\n  return useStore(store, selector);\n}\n\nexport {\n  AgentexDevRootSetupStoreContext,\n  createAgentexDevRootSetupStore,\n  useAgentexDevRootSetupStore,\n};\nexport type { AgentexDevRootSetupStore };\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/agentex/agentex-dev-root/lib/agentex-dev-root-setup-form.ts",
      "content": "import z from \"zod\";\n\n/**\n * Used to by the agentex API proxy to get setup form data stored by the client to the server making the actual request.\n */\nconst SETUP_FORM_DATA_HEADER_NAME = \"x-agentex-ui-kit-setup-form-data\" as const;\n\nconst SetupFormDataSchema = z.object({\n  baseURL: z.union([z.url(), z.literal(\"\")]),\n  apiKeyEnvVar: z.string(),\n  defaultHeaders: z.array(\n    z.object({ key: z.string(), value: z.string(), fromEnv: z.boolean() })\n  ),\n  cookies: z.array(\n    z.object({ name: z.string(), value: z.string() })\n  ),\n  maxRetries: z.number().int().min(0),\n  timeout: z.number().int().min(0),\n});\n\ntype SetupFormData = z.infer<typeof SetupFormDataSchema>;\n\nexport { SETUP_FORM_DATA_HEADER_NAME, SetupFormDataSchema };\nexport type { SetupFormData };\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/agentex/agentex-dev-root/api/agentex/[...slug]/handlers.test.ts",
      "content": "import { handleRequest } from \"@/registry/agentex/agentex-dev-root/api/agentex/[...slug]/handlers\";\n\ndescribe(\"/api/agentex handlers\", () => {\n  it(\"GET should not return a response outside of development\", async () => {\n    const { response } = await handleRequest(\n      \"GET\",\n      [],\n      new Headers(),\n      new URLSearchParams(),\n      null,\n      new AbortController().signal\n    );\n    expect(response).toBeNull();\n  });\n\n  it(\"POST should not return a response outside of development\", async () => {\n    const { response } = await handleRequest(\n      \"POST\",\n      [],\n      new Headers(),\n      new URLSearchParams(),\n      null,\n      new AbortController().signal\n    );\n    expect(response).toBeNull();\n  });\n});\n",
      "type": "registry:file",
      "target": "app/api/agentex/[[...slug]]/handlers.test.ts"
    },
    {
      "path": "registry/agentex/agentex-dev-root/api/agentex/[...slug]/handlers.ts",
      "content": "import {\n  SETUP_FORM_DATA_HEADER_NAME,\n  SetupFormData,\n  SetupFormDataSchema,\n} from \"@/registry/agentex/agentex-dev-root/lib/agentex-dev-root-setup-form\";\nimport { RequestCookies } from \"@edge-runtime/cookies\";\nimport AgentexSDK from \"agentex\";\n\nfunction safeParseSetupFormData(\n  rawSetupFormData: string | null\n):\n  | { success: SetupFormData | null; error?: undefined }\n  | { success?: undefined; error: unknown } {\n  if (!rawSetupFormData) {\n    return { success: null };\n  }\n\n  try {\n    return { success: SetupFormDataSchema.parse(JSON.parse(rawSetupFormData)) };\n  } catch (error) {\n    return { error };\n  }\n}\n\n/**\n * Blindly proxying requests like this absolutely should not be done in production. This is for local development only!\n *\n * This function proxies requests from the client through the Next.js server so that we don't have to worry about CORS and such.\n */\nexport async function handleRequest(\n  method: string,\n  slug: string[],\n  requestHeaders: Headers,\n  searchParams: URLSearchParams,\n  body: ReadableStream<Uint8Array> | null,\n  signal: AbortSignal\n): Promise<\n  | { response: Response | null; error?: undefined }\n  | { error: string; response?: undefined }\n> {\n  if (process.env.NODE_ENV !== \"development\") {\n    return { response: null };\n  }\n\n  const setupFormDataParseResult = safeParseSetupFormData(\n    requestHeaders.get(SETUP_FORM_DATA_HEADER_NAME)\n  );\n\n  if (setupFormDataParseResult.success === undefined) {\n    console.error(setupFormDataParseResult.error);\n    return { error: `Invalid header value for ${SETUP_FORM_DATA_HEADER_NAME}` };\n  }\n\n  const { success: setupFormData } = setupFormDataParseResult;\n  const baseURL =\n    setupFormData?.baseURL ||\n    new AgentexSDK({ environment: \"development\" }).baseURL;\n  const defaultHeaders = setupFormData?.defaultHeaders ?? [];\n  const formCookies = setupFormData?.cookies ?? [];\n  const apiKey = setupFormData?.apiKeyEnvVar\n    ? process.env[setupFormData.apiKeyEnvVar]\n    : undefined;\n\n  // CREATE HEADERS\n  const headers = new Headers(requestHeaders);\n\n  // Merge headers from client request with form-specified defaults\n  // Form does not override existing\n  for (const defaultHeader of defaultHeaders.filter(\n    (defaultHeader) => !headers.get(defaultHeader.key)\n  )) {\n    const headerValue = defaultHeader.fromEnv\n      ? process.env[defaultHeader.value]\n      : defaultHeader.value;\n    if (headerValue !== undefined) {\n      headers.set(defaultHeader.key, headerValue);\n    }\n  }\n\n  // Set API key if specified\n  // Form overrides existing\n  if (apiKey !== undefined) {\n    headers.set(\"authorization\", `Bearer ${apiKey}`);\n  }\n\n  // Merge client cookies with form-specified cookies\n  // Form overrides existing\n  const cookies = new RequestCookies(new Headers(headers));\n  for (const cookie of formCookies) {\n    if (cookie.name && cookie.value) {\n      cookies.set(cookie.name, cookie.value);\n    }\n  }\n  if (cookies.size > 0) {\n    headers.set(\"cookie\", cookies.toString());\n  }\n  // END CREATE HEADERS\n\n  const proxyURL = new URL(`${baseURL}/${slug.join(\"/\")}`);\n  proxyURL.search = searchParams.toString();\n\n  const response = await fetch(proxyURL, {\n    method,\n    headers,\n    body,\n    signal,\n    ...(body !== null ? { duplex: \"half\" } : null),\n  });\n\n  return { response };\n}\n",
      "type": "registry:file",
      "target": "app/api/agentex/[[...slug]]/handlers.ts"
    },
    {
      "path": "registry/agentex/agentex-dev-root/api/agentex/[...slug]/route.ts",
      "content": "import { handleRequest } from \"@/registry/agentex/agentex-dev-root/api/agentex/[...slug]/handlers\";\nimport { headers } from \"next/headers\";\nimport { notFound } from \"next/navigation\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ slug: string[] }> }\n): Promise<NextResponse> {\n  const [{ slug }, headersList] = await Promise.all([params, headers()]);\n  const { searchParams } = request.nextUrl;\n  const { body } = request;\n\n  const { response, error } = await handleRequest(\n    \"GET\",\n    slug,\n    headersList,\n    searchParams,\n    body,\n    request.signal\n  );\n\n  if (response === null) {\n    return notFound();\n  }\n\n  if (error !== undefined) {\n    return new NextResponse(error, { status: 400 });\n  }\n\n  return new NextResponse(response.body, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers,\n  });\n}\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ slug: string[] }> }\n): Promise<NextResponse> {\n  const [{ slug }, headersList] = await Promise.all([params, headers()]);\n  const { searchParams } = request.nextUrl;\n  const { body } = request;\n\n  const { response, error } = await handleRequest(\n    \"POST\",\n    slug,\n    headersList,\n    searchParams,\n    body,\n    request.signal\n  );\n\n  if (response === null) {\n    return notFound();\n  }\n\n  if (error !== undefined) {\n    return new NextResponse(error, { status: 400 });\n  }\n\n  return new NextResponse(response.body, {\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers,\n  });\n}\n",
      "type": "registry:page",
      "target": "app/api/agentex/[[...slug]]/route.ts"
    }
  ]
}