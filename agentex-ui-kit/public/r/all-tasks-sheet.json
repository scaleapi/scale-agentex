{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "all-tasks-sheet",
  "type": "registry:component",
  "title": "All Tasks Sheet",
  "description": "Sheet component for displaying and selecting from all available tasks.",
  "dependencies": [
    "agentex@0.1.0-alpha.6",
    "date-fns",
    "react"
  ],
  "registryDependencies": [
    "button",
    "sheet",
    "http://localhost:3000/r/task-status-icon.json"
  ],
  "files": [
    {
      "path": "registry/agentex/all-tasks-sheet/all-tasks-sheet.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { TaskStatusIcon } from \"@/registry/agentex/task-status-icon/task-status-icon\";\nimport type { Task } from \"agentex/resources\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport type AllTasksSheetProps = {\n  tasks: Task[];\n  /**\n   * omitted: uncontrolled\n   * null: controlled + no task selected\n   * Task[\"id\"]: controlled + task selected\n   */\n  selectedTaskID?: Task[\"id\"] | null;\n  onSelectTask?: (taskID: Task[\"id\"] | null) => void;\n};\n\n/**\n * WIP\n */\nexport function AllTasksSheet({\n  tasks,\n  selectedTaskID: parentSelectedTaskID,\n  onSelectTask,\n}: AllTasksSheetProps) {\n  const [open, setOpen] = useState(false);\n\n  const isSelectedTaskIDParentControlled = parentSelectedTaskID !== undefined;\n  const [controlledSelectedTaskID, setControlledSelectedTaskID] = useState<\n    Task[\"id\"] | null\n  >(null);\n  const selectedTaskID = isSelectedTaskIDParentControlled\n    ? parentSelectedTaskID\n    : controlledSelectedTaskID;\n\n  const handleTaskSelect = (taskID: Task[\"id\"] | null) => {\n    setControlledSelectedTaskID(taskID);\n    onSelectTask?.(taskID);\n    setOpen(false);\n  };\n\n  const isSelectedTaskIDParentControlledRef = useRef(\n    isSelectedTaskIDParentControlled\n  );\n  useEffect(() => {\n    if (\n      isSelectedTaskIDParentControlledRef.current !==\n      isSelectedTaskIDParentControlled\n    ) {\n      console.error(\n        \"AllTasksSheet: selectedTaskID prop changed from controlled to uncontrolled or vice versa. This may lead to unexpected behavior.\"\n      );\n    }\n  }, [isSelectedTaskIDParentControlled]);\n\n  return (\n    <Sheet open={open} onOpenChange={setOpen}>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\">\n          View All Tasks\n        </Button>\n      </SheetTrigger>\n      <SheetContent className=\"overflow-y-auto\">\n        <SheetHeader>\n          <SheetTitle>Tasks</SheetTitle>\n          <SheetDescription className=\"hidden\">\n            List of all tasks\n          </SheetDescription>\n        </SheetHeader>\n        <div className=\"w-full flex flex-col-reverse pb-8 items-stretch\">\n          {tasks.map((task, index) => (\n            <Button\n              variant={selectedTaskID === task.id ? \"outline\" : \"ghost\"}\n              className=\"justify-start m-2 gap-2\"\n              key={index}\n              onClick={() => handleTaskSelect(task.id)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  handleTaskSelect(task.id);\n                }\n              }}\n            >\n              <TaskStatusIcon status={task.status} />\n              <span className=\"truncate\">\n                {task.name ??\n                  \"Unnamed task from \" +\n                    (task.created_at\n                      ? formatDistanceToNow(task.created_at, {\n                          addSuffix: true,\n                          includeSeconds: false,\n                        })\n                      : \"\")}\n              </span>\n            </Button>\n          ))}\n          {tasks.length === 0 && (\n            <p className=\"text-muted-foreground my-2 mx-auto\">No tasks found.</p>\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}