{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code",
  "type": "registry:ui",
  "title": "Code",
  "description": "Code component for displaying code snippets with syntax highlighting.",
  "dependencies": [
    "class-variance-authority",
    "lucide-react",
    "prism-react-renderer",
    "react"
  ],
  "registryDependencies": [
    "utils",
    "button"
  ],
  "files": [
    {
      "path": "registry/agentex/code/code.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { cva } from \"class-variance-authority\";\nimport { CheckIcon, CopyIcon } from \"lucide-react\";\nimport { Highlight, themes } from \"prism-react-renderer\";\nimport { JSX, memo, useCallback, useState } from \"react\";\n\nconst highlightCodeBlockVariants = cva(\n  \"my-2 p-2 rounded-md grid grid-cols-[max-content_1fr] gap-x-2 max-w-full min-h-14\",\n  {\n    variants: {\n      wrap: {\n        true: \"whitespace-pre-wrap wrap-anywhere\",\n        false: \"overflow-x-auto\",\n      },\n    },\n  }\n);\n\nconst defaultCodeBlockVariants = cva(\"rounded-md\", {\n  variants: {\n    wrap: {\n      true: \"whitespace-pre-wrap wrap-anywhere\",\n      false: \"overflow-x-auto\",\n    },\n  },\n});\n\nfunction Code({\n  children,\n  agentexColorTheme,\n  agentexCodeLanguage,\n  agentexWhitespaceWrap,\n  className,\n  ...props\n}: JSX.IntrinsicElements[\"code\"] & {\n  agentexColorTheme: \"dark\" | \"light\";\n  agentexCodeLanguage?: string | undefined | null;\n  agentexWhitespaceWrap?: boolean | undefined | null;\n}) {\n  const wrap: boolean = !!agentexWhitespaceWrap;\n  const [showCopySuccess, setShowCopySuccess] = useState(false);\n\n  const syntaxHighlightContent = String(children).replace(/\\n$/, \"\");\n\n  const handleCopy = useCallback<() => void>(() => {\n    navigator.clipboard.writeText(syntaxHighlightContent).then(() => {\n      setShowCopySuccess(true);\n      setTimeout(() => setShowCopySuccess(false), 1_000);\n    });\n  }, [syntaxHighlightContent]);\n\n  if (agentexCodeLanguage) {\n    return (\n      <div className={cn(\"relative\", className)}>\n        <Button\n          className=\"absolute top-2 right-2 z-10\"\n          size=\"icon\"\n          variant=\"ghost\"\n          aria-label=\"Copy code\"\n          onClick={(event) => {\n            event.stopPropagation();\n            handleCopy();\n          }}\n          onKeyDown={(event) => {\n            if (event.key === \"Enter\" || event.key === \" \") {\n              event.stopPropagation();\n              handleCopy();\n            }\n          }}\n        >\n          {showCopySuccess ? <CheckIcon color=\"green\" /> : <CopyIcon />}\n        </Button>\n        <Highlight\n          code={syntaxHighlightContent}\n          language={agentexCodeLanguage}\n          theme={\n            agentexColorTheme === \"dark\"\n              ? themes.nightOwl\n              : themes.nightOwlLight\n          }\n          {...props}\n        >\n          {({ style, tokens, getLineProps, getTokenProps }) => (\n            <pre style={style} className={highlightCodeBlockVariants({ wrap })}>\n              {tokens.flatMap((line, i) => {\n                const { className: lineClassName, ...lineProps } = getLineProps(\n                  {\n                    line,\n                  }\n                );\n\n                return [\n                  <span\n                    key={`line-${i}`}\n                    className=\"select-none text-slate-400 w-fit\"\n                  >\n                    {i + 1}\n                  </span>,\n                  <div\n                    key={`content-${i}`}\n                    className={cn({ \"flex flex-wrap\": wrap }, lineClassName)}\n                    {...lineProps}\n                  >\n                    {line.map((token, key) => (\n                      <span key={key} {...getTokenProps({ token })} />\n                    ))}\n                  </div>,\n                ];\n              })}\n            </pre>\n          )}\n        </Highlight>\n      </div>\n    );\n  }\n\n  // inline or no language\n  return (\n    <code className={defaultCodeBlockVariants({ wrap, className })} {...props}>\n      {children}\n    </code>\n  );\n}\n\nconst MemoizedCode = memo(Code);\n\nexport { Code, MemoizedCode };\n",
      "type": "registry:ui"
    }
  ]
}