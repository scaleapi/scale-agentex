{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "expandable-pre",
  "type": "registry:ui",
  "title": "Expandable Pre",
  "description": "Expandable preformatted text component with line clamping and show more/less functionality.",
  "dependencies": [
    "class-variance-authority",
    "react"
  ],
  "registryDependencies": [
    "button",
    "utils"
  ],
  "files": [
    {
      "path": "registry/agentex/expandable-pre/expandable-pre.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { cva } from \"class-variance-authority\";\nimport {\n  memo,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nconst preVariants = cva(\n  \"text-neutral font-sans text-pretty whitespace-pre-wrap wrap-anywhere\",\n  {\n    variants: {\n      fontSize: {\n        sm: \"text-sm\",\n        md: \"text-md\",\n      },\n      fontWeight: {\n        normal: \"font-normal\",\n        semibold: \"font-semibold\",\n      },\n    },\n    defaultVariants: {\n      fontSize: \"md\",\n      fontWeight: \"normal\",\n    },\n  }\n);\n\nconst buttonVariants = cva(\"text-neutral\", {\n  variants: {\n    fontSize: {\n      sm: \"text-sm\",\n      md: \"text-md\",\n    },\n    fontWeight: {\n      normal: \"font-normal\",\n      semibold: \"font-semibold\",\n    },\n  },\n  defaultVariants: {\n    fontSize: \"md\",\n    fontWeight: \"normal\",\n  },\n});\n\ntype ExpandablePreProps = {\n  children: ReactNode;\n  isForceExpanded?: boolean;\n  /**\n   * must be an integer, at least 1\n   */\n  lineClampValue: number;\n\n  /**\n   * @default 'md'\n   */\n  fontSize?: \"sm\" | \"md\";\n\n  /**\n   * @default 'normal'\n   */\n  fontWeight?: \"normal\" | \"semibold\";\n  className?: string;\n};\n\nfunction ExpandablePre({\n  children,\n  isForceExpanded,\n  lineClampValue,\n  fontSize,\n  fontWeight,\n  className,\n}: ExpandablePreProps) {\n  const [isSelfExpanded, setIsSelfExpanded] = useState(false);\n  const isExpanded = isForceExpanded || isSelfExpanded;\n  const [isClamped, setIsClamped] = useState(false);\n\n  const responseRef = useRef<HTMLPreElement | null>(null);\n\n  const updateClamped = useCallback(() => {\n    if (isExpanded || !responseRef.current) {\n      return;\n    }\n    setIsClamped(\n      responseRef.current.scrollHeight > responseRef.current.clientHeight\n    );\n  }, [isExpanded, setIsClamped]);\n\n  useEffect(() => {\n    updateClamped();\n\n    window.addEventListener(\"resize\", updateClamped);\n\n    return () => {\n      window.removeEventListener(\"resize\", updateClamped);\n    };\n  }, [updateClamped]);\n\n  return (\n    <div\n      className={cn(\n        \"w-full flex flex-col gap-1 items-start\",\n        {\n          \"hover:bg-foreground/10\": isClamped,\n        },\n        className\n      )}\n    >\n      <pre\n        className={preVariants({\n          fontSize,\n          fontWeight,\n        })}\n        style={\n          isExpanded\n            ? {}\n            : {\n                display: \"-webkit-box\",\n                WebkitLineClamp: lineClampValue,\n                WebkitBoxOrient: \"vertical\",\n                overflow: \"hidden\",\n              }\n        }\n        ref={(node) => {\n          responseRef.current = node;\n          updateClamped();\n        }}\n      >\n        {children}\n      </pre>\n      {isClamped && !isForceExpanded && (\n        <Button\n          variant=\"link\"\n          className={buttonVariants({\n            fontSize,\n            fontWeight,\n          })}\n          onClick={(e) => {\n            if (isClamped) {\n              setIsSelfExpanded((prev) => !prev);\n            }\n            e.stopPropagation();\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\" || e.key === \" \") {\n              if (isClamped) {\n                setIsSelfExpanded((prev) => !prev);\n              }\n              e.stopPropagation();\n            }\n          }}\n        >\n          {isExpanded ? \"Show less\" : \"Show more\"}\n        </Button>\n      )}\n    </div>\n  );\n}\n\nconst MemoizedExpandablePre = memo(ExpandablePre);\n\nexport { ExpandablePre, MemoizedExpandablePre };\n",
      "type": "registry:ui"
    }
  ]
}