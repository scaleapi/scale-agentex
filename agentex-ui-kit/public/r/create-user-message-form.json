{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "create-user-message-form",
  "type": "registry:component",
  "title": "Create User Message Form",
  "description": "Form component for creating user messages with text or data content.",
  "dependencies": [
    "@hookform/resolvers@5",
    "agentex@0.1.0-alpha.6",
    "react-hook-form",
    "react",
    "zod@4",
    "zustand"
  ],
  "registryDependencies": [
    "button",
    "form",
    "select",
    "tabs",
    "textarea",
    "utils"
  ],
  "files": [
    {
      "path": "registry/agentex/create-user-message-form/create-user-message-form.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport type { Agent, DataContent, TextContent } from \"agentex/resources\";\nimport {\n  createContext,\n  ReactElement,\n  ReactNode,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  Control,\n  useForm,\n  UseFormHandleSubmit,\n  UseFormReset,\n  UseFormSetValue,\n  UseFormWatch,\n} from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { createStore, useStore } from \"zustand\";\n\ntype FormStoreProps = {\n  theme: \"light\" | \"dark\";\n  agentOptions: Agent[];\n  onSubmit: (data: FormData, resetForm: (formData?: FormData) => void) => void;\n  defaultValuesFromParent: CustomPartial<FormData> | undefined;\n  control: Control<FormData>;\n  setValue: UseFormSetValue<FormData>;\n  watch: UseFormWatch<FormData>;\n  handleSubmit: UseFormHandleSubmit<FormData>;\n  reset: UseFormReset<FormData>;\n};\n\ntype FormStoreState = FormStoreProps;\n\nfunction createFormStore(initialState: FormStoreProps) {\n  return createStore<FormStoreState>()(() => ({\n    ...initialState,\n  }));\n}\n\ntype FormStore = ReturnType<typeof createFormStore>;\n\nconst FormContext = createContext<FormStore | null>(null);\n\nconst formDataSchema = z.object({\n  kind: z.enum([\"text\", \"data\"]),\n  textContent: z.string().max(100_000),\n  dataContent: z\n    .string()\n    .max(100_000)\n    .superRefine((arg, ctx) => {\n      if (!arg) {\n        return;\n      }\n      try {\n        const jsonValue = JSON.parse(arg);\n        const recordParseResult = z\n          .record(z.string(), z.any())\n          .safeParse(jsonValue);\n        if (!recordParseResult.success) {\n          for (const issue of recordParseResult.error.issues) {\n            ctx.addIssue(issue);\n          }\n        }\n      } catch {\n        ctx.addIssue({\n          code: \"custom\",\n          message: \"Data must be a valid JSON object\",\n        });\n      }\n    }),\n  agentID: z.string().min(1, \"Agent is required\"),\n});\n\ntype FormData = z.infer<typeof formDataSchema>;\n\ntype CustomPartial<T> = { [P in keyof T]?: T[P] | null | undefined };\n\nfunction createDefaultValues(\n  agentOptions: Agent[],\n  defaultValues?: CustomPartial<FormData>\n): FormData {\n  const defaultAgentIDFromDefaultValues = agentOptions.some(\n    (agent) => agent.id === defaultValues?.agentID\n  )\n    ? defaultValues?.agentID\n    : undefined;\n\n  const defaultAgentIDFromAgentOptions =\n    agentOptions.length === 1 ? agentOptions[0]?.id : undefined;\n\n  return {\n    kind: defaultValues?.kind ?? \"text\",\n    textContent: defaultValues?.textContent ?? \"\",\n    dataContent: defaultValues?.dataContent ?? \"\",\n    agentID:\n      defaultAgentIDFromDefaultValues ?? defaultAgentIDFromAgentOptions ?? \"\",\n  };\n}\n\nfunction CreateUserMessageFormContent() {\n  const store = useContext(FormContext);\n  if (store === null) {\n    throw new Error(\n      \"CreateUserMessageFormContent must be used within a CreateUserMessageForm\"\n    );\n  }\n\n  const control = useStore(store, (s) => s.control);\n  const agentOptions = useStore(store, (s) => s.agentOptions);\n  const onSubmit = useStore(store, (s) => s.onSubmit);\n  const formHandleSubmit = useStore(store, (s) => s.handleSubmit);\n  const setValue = useStore(store, (s) => s.setValue);\n\n  const handleSubmit = formHandleSubmit((data) => {\n    onSubmit(data, (resetFormData) => {\n      const currentStoreState = store.getState();\n      currentStoreState.reset(\n        resetFormData ??\n          createDefaultValues(\n            currentStoreState.agentOptions,\n            currentStoreState.defaultValuesFromParent\n          )\n      );\n    });\n  });\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-8\">\n      <FormField\n        control={control}\n        name=\"kind\"\n        render={({ field: kindField }) => (\n          <Tabs\n            value={kindField.value}\n            onValueChange={(value) => {\n              switch (value) {\n                case \"text\":\n                  setValue(\"kind\", \"text\");\n                  break;\n                case \"data\":\n                  setValue(\"kind\", \"data\");\n                  break;\n              }\n            }}\n          >\n            <div className=\"flex items-baseline-last gap-2\">\n              <span className=\"text-sidebar-foreground\">Message type: </span>\n              <TabsList>\n                <TabsTrigger value=\"text\">Text</TabsTrigger>\n                <TabsTrigger value=\"data\">Data</TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"text\">\n              <FormField\n                control={control}\n                name=\"textContent\"\n                render={({ field }) => (\n                  <FormItem\n                    onKeyDown={(e) => {\n                      if (\n                        e.key === \"Enter\" &&\n                        !e.shiftKey &&\n                        !e.ctrlKey &&\n                        !e.metaKey &&\n                        !e.altKey\n                      ) {\n                        e.preventDefault();\n                        handleSubmit(e);\n                      }\n                    }}\n                  >\n                    <FormLabel hidden>Message Text Content</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Type your message here...\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"data\">\n              <FormField\n                control={control}\n                name=\"dataContent\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel hidden>Message Data Content</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Enter JSON here...\"\n                        className=\"text-mono\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </TabsContent>\n          </Tabs>\n        )}\n      />\n\n      <div className=\"flex justify-between gap-2 items-baseline-last\">\n        <FormField\n          control={control}\n          name=\"agentID\"\n          render={({ field }) => (\n            <FormItem className=\"flex gap-2 items-baseline-last\">\n              <FormLabel>Agent</FormLabel>\n              <FormControl>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select an agent\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {agentOptions.map((agent) => (\n                      <SelectItem key={agent.id} value={agent.id}>\n                        {agent.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Send Message</Button>\n      </div>\n    </form>\n  );\n}\n\nfunction CreateUserMessageFormSelectedAgent({\n  render,\n}: {\n  render: ({ agent }: { agent: Agent | null }) => ReactElement;\n}) {\n  const store = useContext(FormContext);\n  if (store === null) {\n    throw new Error(\n      \"CreateUserMessageFormSelectedAgent must be used within a CreateUserMessageForm\"\n    );\n  }\n\n  const selectedAgentID = useStore(store, (s) => s.watch(\"agentID\"));\n  const agentOptions = useStore(store, (s) => s.agentOptions);\n\n  const selectedAgent = agentOptions.find(\n    (agent) => agent.id === selectedAgentID\n  );\n\n  return render({ agent: selectedAgent ?? null });\n}\n\nfunction CreateUserMessageForm({\n  children,\n  defaultValues,\n  agentOptions,\n  disabled,\n  theme,\n  onSubmit,\n}: {\n  children?: ReactNode;\n  defaultValues?: CustomPartial<FormData>;\n  agentOptions: Agent[];\n  disabled?: boolean;\n  theme: \"light\" | \"dark\";\n  onSubmit: (\n    data:\n      | { kind: \"text\"; content: TextContent[\"content\"]; agentID: Agent[\"id\"] }\n      | { kind: \"data\"; content: DataContent[\"data\"]; agentID: Agent[\"id\"] },\n    resetForm: (formData?: FormData) => void\n  ) => void;\n}) {\n  const form = useForm<FormData>({\n    resolver: zodResolver(formDataSchema),\n    defaultValues: createDefaultValues(agentOptions, defaultValues),\n    disabled: !!disabled,\n  });\n  // form doesn't change value when these ones do\n  // so we can't just pass the entire form into zustand\n  // or state won't update\n  const { control, handleSubmit, setValue, watch, reset } = form;\n\n  const onSubmitRef = useRef(onSubmit);\n  useEffect(() => {\n    onSubmitRef.current = onSubmit;\n  }, [onSubmit]);\n\n  const [store] = useState(() =>\n    createFormStore({\n      theme,\n      agentOptions,\n      control,\n      setValue,\n      watch,\n      handleSubmit,\n      reset,\n      defaultValuesFromParent: defaultValues,\n      onSubmit: (data, ...args) =>\n        onSubmitRef.current(\n          {\n            ...data,\n            content:\n              data.kind === \"data\"\n                ? JSON.parse(data.dataContent)\n                : data.textContent,\n          },\n          ...args\n        ),\n    })\n  );\n\n  // keep store state in sync\n  useEffect(() => {\n    store.setState({ theme });\n  }, [store, theme]);\n\n  useEffect(() => {\n    store.setState({ agentOptions });\n  }, [store, agentOptions]);\n\n  useEffect(() => {\n    store.setState({ control });\n  }, [store, control]);\n\n  useEffect(() => {\n    store.setState({ setValue });\n  }, [store, setValue]);\n\n  useEffect(() => {\n    store.setState({ watch });\n  }, [store, watch]);\n\n  useEffect(() => {\n    store.setState({ handleSubmit });\n  }, [store, handleSubmit]);\n\n  useEffect(() => {\n    store.setState({ reset });\n  }, [store, reset]);\n\n  useEffect(() => {\n    store.setState({ defaultValuesFromParent: defaultValues });\n  }, [store, defaultValues]);\n\n  return (\n    <Form {...form}>\n      <FormContext.Provider value={store}>{children}</FormContext.Provider>\n    </Form>\n  );\n}\n\ntype CreateUserMessageDefaultValues = CustomPartial<FormData>;\n\nexport {\n  CreateUserMessageForm,\n  CreateUserMessageFormContent,\n  CreateUserMessageFormSelectedAgent\n};\nexport type {\n  CreateUserMessageDefaultValues,\n  FormData as CreateUserMessageFormData\n};\n\n",
      "type": "registry:component"
    }
  ]
}